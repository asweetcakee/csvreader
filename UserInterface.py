import tkinter as tk
from tkinter import filedialog, ttk, messagebox
from CSVParser import CSVParser
from DataProcessor import DataProcessor
from ExcelWriter import ExcelWriter


class UserInterface:
    def __init__(self, root):
        self.root = root
        self.root.title("CSV Filter Tool")
        self.root.geometry("600x400")

        # Variables
        self.csv_parser = None
        self.processed_data = None
        self.excel_writer = None
        self.file_path = ""
        self.checkbox_vars = {}

        # Creating an interface
        self.create_interface()

    def create_interface(self):
        # Top panel
        self.create_top_panel()

        # File selection
        self.create_file_selection()

        # Params settings
        self.create_settings()

    def create_top_panel(self):
        frame = tk.Frame(self.root, bg="lightblue", height=50)
        frame.pack(fill=tk.X)

        logo = tk.Label(frame, text="üåü", font=("Arial", 24), bg="lightblue")
        logo.pack(side=tk.LEFT, padx=10)

        title = tk.Label(frame, text="CSV Filter Tool", font=("Arial", 16, "bold"), bg="lightblue")
        title.pack(side=tk.LEFT)

        readme_btn = tk.Button(frame, text="Readme.txt", command=self.open_readme)
        readme_btn.pack(side=tk.RIGHT, padx=10)

    def open_readme(self):
        # !!!!!!!!!!!!! Add a function that opens README.docx !!!!!!!!!!!!
        # Calls helper window
        messagebox.showinfo("Readme", "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã.")

    def create_file_selection(self):
        # Main frame
        frame = tk.Frame(self.root, pady=20, padx=20)
        frame.pack(fill=tk.X)

        # Label and select file button
        tk.Label(frame, text="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª:").grid(row=0, column=0, sticky=tk.W)
        select_btn = tk.Button(frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.select_file)
        select_btn.grid(row=0, column=0, sticky=tk.E)

        # Frame for a Text with fixed sizes
        text_frame = tk.Frame(frame, width=560, height=100)
        text_frame.grid(row=1, column=0, sticky="we")
        text_frame.grid_propagate(False)  # Disables auto wrap on parent frame

        # Horizontal frame
        scroll_x = tk.Scrollbar(text_frame, orient=tk.HORIZONTAL)
        scroll_x.grid(row=1, column=0, sticky="we")

        # Text with a fixed size
        self.file_preview = tk.Text(text_frame, wrap=tk.NONE, state=tk.DISABLED, xscrollcommand=scroll_x.set, height=5)
        self.file_preview.grid(row=0, column=0, sticky="nsew")

        # Attaches scroll to the Text widget
        scroll_x.config(command=self.file_preview.xview)

        # Sets up Text sizes according to text_frame
        text_frame.grid_rowconfigure(0, weight=1)
        text_frame.grid_columnconfigure(0, weight=1)
        
    def select_file(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if not self.file_path:
            print("Files was not selected.")
            return

        try:
            self.csv_parser = CSVParser(self.file_path)
            self.csv_parser.read_csv()
            self.show_file_preview()
            
            self.update_dropdowns()  # Depends on dropdowns value
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def update_dropdowns(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤."""
        if self.csv_parser.data is not None:
            columns = self.csv_parser.data.columns.tolist() 
            self.region_dropdown['values'] = columns  # Updates region dropdown 
            self.phone_dropdown['values'] = columns  # Updates phone dropdown
    
    def update_filter_listbox(self, event=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Listbox —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏."""
        if self.csv_parser.data is not None:
            # Gets selected column out of dropdown
            selected_column = self.region_dropdown.get()

            if selected_column:
                try:
                    # Gets unique regions
                    regions = self.csv_parser.get_unique_regions(selected_column)
                    # Refreshes before updating
                    for widget in self.checkbox_inner_frame.winfo_children():
                        widget.grid_forget()

                    # Adds unique regions to the Listbox
                    for i, region in enumerate(regions):
                        var = tk.BooleanVar()
                        checkbox = tk.Checkbutton(self.checkbox_inner_frame, text=region, variable=var)
                        checkbox.grid(row=i+2, column=0, sticky=tk.W)
                        self.checkbox_vars[region] = var                        

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä Canvas –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
                    # Updates Canvas size basing on checkboxes quantity
                    self.checkbox_inner_frame.update_idletasks()
                    self.canvas.config(scrollregion=self.canvas.bbox("all"))
                    
                except ValueError as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {str(e)}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞.")
    
    def show_file_preview(self):
        self.file_preview.config(state=tk.NORMAL)
        self.file_preview.delete(1.0, tk.END)

        preview_text = self.csv_parser.data.head(3).to_string(index=False)
        self.file_preview.insert(tk.END, preview_text)

        self.file_preview.config(state=tk.DISABLED)

    def create_settings(self):
        frame = tk.Frame(self.root, pady=10, padx=10)
        frame.pack(fill=tk.X)

        # Dropdown
        dropdown_frame = tk.Frame(frame, width=200, height=100, pady=10, padx=10)
        dropdown_frame.grid(row=0, column=0, sticky="n")
        
        tk.Label(dropdown_frame, text="1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏:").grid(row=0, column=0, sticky=tk.W)
        self.region_col_var = tk.StringVar()
        self.region_dropdown = ttk.Combobox(dropdown_frame, textvariable=self.region_col_var)
        self.region_dropdown.grid(row=0, column=1, sticky=tk.W)

        tk.Label(dropdown_frame, text="2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:").grid(row=1, column=0, sticky=tk.W)
        self.phone_col_var = tk.StringVar()
        self.phone_dropdown = ttk.Combobox(dropdown_frame, textvariable=self.phone_col_var)
        self.phone_dropdown.grid(row=1, column=1, sticky=tk.W)

        # Checkbox
        checkbox_frame_main = tk.Frame(frame, width=100, height=100, pady=10, padx=10,)
        checkbox_frame_main.grid(row=0, column=1, sticky="n")
        
        tk.Label(checkbox_frame_main, text="3. –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", wraplength=150, anchor=tk.W).grid(row=0, column=0, sticky=tk.W)
        
        self.checkbox_frame = tk.Frame(checkbox_frame_main, width=150, height=100, pady=10, padx=10)
        self.checkbox_frame.grid(row=1, column=0, sticky="nw")
        
        # Creates Canvas for scroll
        self.canvas = tk.Canvas(self.checkbox_frame, width=100, height=100)
        self.canvas.grid(row=0, column=0, sticky="n")

        # Vertical scrollbar
        scroll_y = tk.Scrollbar(self.checkbox_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        scroll_y.grid(row=0, column=1, sticky="ns")

        self.canvas.config(yscrollcommand=scroll_y.set)

        # Frame inside canvas that holds checkboxes
        self.checkbox_inner_frame = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.checkbox_inner_frame, anchor="nw")
        
        apply_btn = tk.Button(frame, text="4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.apply_settings)
        apply_btn.grid(row=0, column=0, sticky="ew")

        # Binds handler that changes Listbox content once any value was selected in the region dropdown
        self.region_dropdown.bind("<<ComboboxSelected>>", self.update_filter_listbox)

    def apply_settings(self):       
        if not self.csv_parser:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª.")
            return

        self.region_col = self.region_col_var.get().strip()
        self.phone_col = self.phone_col_var.get().strip()
        
        if not self.region_col or not self.phone_col:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")
            return

        selected_regions = [region for region, var in self.checkbox_vars.items() if var.get()]
                
        if not selected_regions:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω.")
            return

        self.start_processing(selected_regions)
               
    def start_processing(self, selected_regions):
        self.processed_data = DataProcessor(selected_regions)
        
        # Makes sure self.csv_parser is safe to use and not None
        if self.csv_parser and self.csv_parser.data is not None:
            for _, row in self.csv_parser.data.iterrows():
                self.processed_data.process_row(row[self.phone_col])
            self.write_to_excel()
        else:
            print("–û—à–∏–±–∫–∞", "–î–∞–Ω–Ω—ã–µ CSV –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # Closes filtering window after data proccessing is finished
        for window in self.root.winfo_children():
            if isinstance(window, tk.Toplevel):
                window.destroy()
        
        # Clears all variable values
        self.file_path = ""
        self.csv_parser = None
        self.params = {}
        self.checkbox_vars = {}
        
        # Clears dropdown values
        self.region_col_var.set('')  
        self.phone_col_var.set('')   
        
        self.region_dropdown.set('') 
        self.region_dropdown['values'] = []
        self.phone_dropdown.set('')
        self.phone_dropdown['values'] = []
        
        # Clears text widget values
        if hasattr(self, 'file_preview'):
            self.file_preview.config(state=tk.NORMAL)
            self.file_preview.delete(1.0, tk.END)
            self.file_preview.config(state=tk.DISABLED)
            
        # Clears checkbox values
        for widget in self.checkbox_inner_frame.winfo_children():
            widget.destroy()


    def write_to_excel(self):
        writer_valid = ExcelWriter("valid_phones.xlsx")
        writer_invalid = ExcelWriter("invalid_phones.xlsx") 
        writer_valid.write_to_excel({**self.processed_data.valid_numbers})
        writer_invalid.write_to_excel({**self.processed_data.invalid_numbers})
        print("–ì–æ—Ç–æ–≤–æ", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")   
